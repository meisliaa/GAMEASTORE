// Generated by view binder compiler. Do not edit!
package com.example.game_store.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.game_store.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityGameInputBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button buttonAdd;

  @NonNull
  public final Button buttonView;

  @NonNull
  public final EditText editTextBig;

  @NonNull
  public final EditText editTextDesk;

  @NonNull
  public final EditText editTextName;

  @NonNull
  public final EditText editTextPub;

  @NonNull
  public final EditText editTextRate;

  @NonNull
  public final EditText editTextUnit;

  private ActivityGameInputBinding(@NonNull LinearLayout rootView, @NonNull Button buttonAdd,
      @NonNull Button buttonView, @NonNull EditText editTextBig, @NonNull EditText editTextDesk,
      @NonNull EditText editTextName, @NonNull EditText editTextPub, @NonNull EditText editTextRate,
      @NonNull EditText editTextUnit) {
    this.rootView = rootView;
    this.buttonAdd = buttonAdd;
    this.buttonView = buttonView;
    this.editTextBig = editTextBig;
    this.editTextDesk = editTextDesk;
    this.editTextName = editTextName;
    this.editTextPub = editTextPub;
    this.editTextRate = editTextRate;
    this.editTextUnit = editTextUnit;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityGameInputBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityGameInputBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_game_input, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityGameInputBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonAdd;
      Button buttonAdd = ViewBindings.findChildViewById(rootView, id);
      if (buttonAdd == null) {
        break missingId;
      }

      id = R.id.buttonView;
      Button buttonView = ViewBindings.findChildViewById(rootView, id);
      if (buttonView == null) {
        break missingId;
      }

      id = R.id.editTextBig;
      EditText editTextBig = ViewBindings.findChildViewById(rootView, id);
      if (editTextBig == null) {
        break missingId;
      }

      id = R.id.editTextDesk;
      EditText editTextDesk = ViewBindings.findChildViewById(rootView, id);
      if (editTextDesk == null) {
        break missingId;
      }

      id = R.id.editTextName;
      EditText editTextName = ViewBindings.findChildViewById(rootView, id);
      if (editTextName == null) {
        break missingId;
      }

      id = R.id.editTextPub;
      EditText editTextPub = ViewBindings.findChildViewById(rootView, id);
      if (editTextPub == null) {
        break missingId;
      }

      id = R.id.editTextRate;
      EditText editTextRate = ViewBindings.findChildViewById(rootView, id);
      if (editTextRate == null) {
        break missingId;
      }

      id = R.id.editTextUnit;
      EditText editTextUnit = ViewBindings.findChildViewById(rootView, id);
      if (editTextUnit == null) {
        break missingId;
      }

      return new ActivityGameInputBinding((LinearLayout) rootView, buttonAdd, buttonView,
          editTextBig, editTextDesk, editTextName, editTextPub, editTextRate, editTextUnit);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
